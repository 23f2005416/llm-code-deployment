from github import Github, GithubException
import base64
import time
from app.utils import Config

class GitHubManager:
    def __init__(self):
        if not Config.GITHUB_TOKEN:
            raise ValueError("GitHub token not configured. Set GITHUB_TOKEN in .env file")
        
        self.g = Github(Config.GITHUB_TOKEN)
        self.user = self.g.get_user()
        print(f"✅ GitHub authenticated as: {self.user.login}")

    def repo_exists(self, task_id: str) -> bool:
        """Check if a repository already exists for this task"""
        repo_name = f"task-{task_id.replace(' ', '-').replace('_', '-').lower()[:30]}"
        repo_name = ''.join(c for c in repo_name if c.isalnum() or c in ['-', '_'])
        
        try:
            repo = self.user.get_repo(repo_name)
            return True
        except:
            return False

    def get_repo_url(self, task_id: str) -> str:
        """Get the repository URL for a task"""
        repo_name = f"task-{task_id.replace(' ', '-').replace('_', '-').lower()[:30]}"
        repo_name = ''.join(c for c in repo_name if c.isalnum() or c in ['-', '_'])
        
        try:
            repo = self.user.get_repo(repo_name)
            return repo.html_url
        except:
            return f"https://github.com/{self.user.login}/task-{task_id.replace(' ', '-').lower()[:30]}"
    
    def _get_mit_license(self) -> str:
        """Return MIT License content"""
        return """MIT License

Copyright (c) 2024 Student Developer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE."""
    
    def _generate_readme(self, brief: str, task_id: str) -> str:
        """Generate a professional README.md"""
        return f"""# Task: {task_id}

## Overview
{brief}

## Description
This project was automatically generated as part of the LLM Code Deployment system.

## Features
- Static web application
- Deployed on GitHub Pages
- Responsive design

## Setup
1. Clone this repository
2. Open `index.html` in a web browser
3. No additional setup required

## Deployment
This project is automatically deployed to GitHub Pages. The live site is available at:
`https://[username].github.io/{task_id}/`

## Technologies Used
- HTML5
- CSS3
- JavaScript (ES6+)

## License
MIT License - see LICENSE file for details.

---

*Automatically generated by LLM Code Deployment System*"""
    
    def create_repo_from_code(self, task_id: str, code_files: dict, brief: str) -> dict:
        """Create GitHub repo with generated code and return repo info"""
        
        # Clean repo name (GitHub has restrictions)
        repo_name = f"task-{task_id.replace(' ', '-').replace('_', '-').lower()[:30]}"
        repo_name = ''.join(c for c in repo_name if c.isalnum() or c in ['-', '_'])
        
        print(f"🔄 Creating repository: {repo_name}")
        
        try:
            # Check if repo already exists
            try:
                existing_repo = self.user.get_repo(repo_name)
                print(f"⚠️  Repository {repo_name} already exists, updating instead")
                return self.update_repo(existing_repo.html_url, code_files, brief, "Initial commit")
            except:
                pass  # Repo doesn't exist, continue with creation
            
            # Create new repository
            repo = self.user.create_repo(
                name=repo_name,
                description=f"Auto-generated app for task: {task_id}",
                private=False,
                auto_init=False
            )
            print(f"✅ Repository created: {repo.html_url}")
            
            # Add MIT License
            repo.create_file("LICENSE", "Add MIT License", self._get_mit_license())
            print("✅ LICENSE added")
            
            # Add generated README
            readme_content = self._generate_readme(brief, task_id)
            repo.create_file("README.md", "Add README.md", readme_content)
            print("✅ README.md added")
            
            # Add other code files
            for filename, content in code_files.items():
                if content and content.strip() and filename not in ["README.md", "LICENSE"]:
                    repo.create_file(filename, f"Add {filename}", content)
                    print(f"✅ {filename} added")
            
            # Enable GitHub Pages (deploy from root directory)
            repo.edit(has_pages=True, pages_build_type="gh-pages")
            print("✅ GitHub Pages enabled")
            
            # Wait a moment for Pages to initialize
            time.sleep(2)
            
            # Get the latest commit SHA
            commits = list(repo.get_commits())
            latest_commit = commits[0] if commits else None
            
            repo_info = {
                "repo_url": repo.html_url,
                "commit_sha": latest_commit.sha if latest_commit else "unknown",
                "pages_url": f"https://{self.user.login}.github.io/{repo_name}/"
            }
            
            print(f"🎉 Repository setup complete:")
            print(f"   - Repo: {repo_info['repo_url']}")
            print(f"   - Pages: {repo_info['pages_url']}")
            print(f"   - Commit: {repo_info['commit_sha'][:8]}")
            
            return repo_info
            
        except GithubException as e:
            error_msg = f"GitHub API error: {e.data.get('message', str(e))}"
            print(f"💥 {error_msg}")
            raise Exception(error_msg)
    
    def update_repo(self, repo_url: str, code_files: dict, brief: str, commit_message: str = "Update application") -> dict:
        """Update existing repository with new code"""
        try:
            # Extract repo name from URL
            repo_name = repo_url.split('/')[-1]
            repo = self.user.get_repo(repo_name)
            
            print(f"🔄 Updating repository: {repo_name}")
            
            # Update README
            readme_content = self._generate_readme(brief, repo_name)
            try:
                file_contents = repo.get_contents("README.md")
                repo.update_file("README.md", f"{commit_message} - Update README", readme_content, file_contents.sha)
            except:
                repo.create_file("README.md", f"{commit_message} - Add README", readme_content)
            print("✅ README.md updated")
            
            # Update other files
            for filename, new_content in code_files.items():
                if filename not in ["README.md", "LICENSE"] and new_content.strip():
                    try:
                        # Try to update existing file
                        file_contents = repo.get_contents(filename)
                        repo.update_file(filename, f"{commit_message} - Update {filename}", new_content, file_contents.sha)
                        print(f"✅ {filename} updated")
                    except:
                        # Create new file
                        repo.create_file(filename, f"{commit_message} - Add {filename}", new_content)
                        print(f"✅ {filename} created")
            
            # Get latest commit
            commits = list(repo.get_commits())
            latest_commit = commits[0] if commits else None
            
            repo_info = {
                "repo_url": repo.html_url,
                "commit_sha": latest_commit.sha if latest_commit else "unknown",
                "pages_url": f"https://{self.user.login}.github.io/{repo_name}/"
            }
            
            print(f"🎉 Repository update complete:")
            print(f"   - Latest commit: {repo_info['commit_sha'][:8]}")
            
            return repo_info
            
        except GithubException as e:
            error_msg = f"GitHub API error: {e.data.get('message', str(e))}"
            print(f"💥 {error_msg}")
            raise Exception(error_msg)
    
    def test_connection(self) -> bool:
        """Test GitHub connection and permissions"""
        try:
            user = self.g.get_user()
            print(f"✅ GitHub connection successful: {user.login}")
            
            # Test repo creation permission by checking rate limit
            rate_limit = self.g.get_rate_limit()
            print(f"✅ Rate limit: {rate_limit.core.remaining}/{rate_limit.core.limit}")
            
            return True
        except Exception as e:
            print(f"💥 GitHub connection failed: {e}")
            return False